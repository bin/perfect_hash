# =======================================================================
# ================= Python code for perfect hash function ===============
# =======================================================================

G = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 328, 17, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 296, 0, 0, 220, 223, 0, 318, 0, 0, 344, 447, 0, 0, 0, 
    491, 0, 71, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 
    70, 0, 0, 25, 0, 85, 0, 102, 250, 0, 69, 0, 197, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 81, 121, 113, 0, 180, 0, 76, 210, 212, 
    42, 0, 367, 0, 410, 0, 0, 184, 46, 0, 164, 449, 77, 290, 0, 182, 0, 0, 
    27, 0, 0, 0, 60, 0, 0, 189, 176, 0, 0, 0, 0, 41, 0, 0, 310, 0, 450, 0, 
    166, 252, 235, 180, 0, 449, 67, 24, 90, 83, 400, 6, 0, 95, 0, 0, 360, 
    40, 0, 0, 123, 181, 0, 190, 0, 423, 0, 0, 148, 0, 0, 64, 316, 0, 0, 0, 
    0, 0, 471, 94, 130, 0, 167, 73, 216, 0, 0, 0, 64, 225, 0, 0, 58, 0, 0, 
    0, 0, 172, 0, 64, 195, 0, 113, 122, 452, 7, 415, 330, 0, 0, 0, 0, 144, 
    135, 483, 170, 0, 484, 0, 0, 320, 7, 0, 193, 0, 360, 381, 0, 46, 187, 
    182, 211, 213, 35, 199, 2, 0, 0, 0, 0, 0, 0, 0, 0, 184, 447, 467, 0, 
    470, 0, 231, 68, 0, 0, 0, 0, 392, 221, 0, 0, 0, 0, 379, 0, 304, 116, 
    140, 253, 237, 221, 462, 417, 0, 97, 450, 0, 158, 0, 19, 0, 0, 0, 0, 0, 
    121, 279, 157, 0, 360, 342, 0, 0, 0, 0, 119, 142, 21, 0, 0, 55, 456, 
    27, 88, 0, 111, 220, 0, 0, 0, 0, 433, 0, 207, 30, 0, 292, 21, 0, 0, 
    492, 41, 194, 206, 227, 0, 0, 89, 225, 146, 486, 204, 0, 12, 208, 0, 
    281, 270, 0, 359, 162, 0, 0, 0, 283, 0, 136, 0, 188, 126, 358, 129, 0, 
    0, 480, 244, 3, 114, 0, 185, 353, 2, 154, 0, 152, 10, 196, 0, 81, 80, 
    0, 0, 359, 209, 454, 26, 0, 0, 298, 0, 320, 76, 396, 0, 58, 69, 0, 96, 
    0, 0, 106, 0, 0, 22, 0, 9, 0, 0, 431, 92, 464, 0, 407, 466, 0, 94, 388, 
    181, 0, 0, 373, 0, 50, 318, 229, 0, 401, 0, 465, 314, 112, 55, 437, 
    101, 0, 0, 0, 43, 245, 118, 409, 0, 0, 0, 0, 0, 6, 0, 60, 370, 0, 250, 
    35, 229, 174, 0, 420, 423, 386, 0, 95, 214, 286, 0, 0, 58, 117, 117, 0, 
    0, 0, 137, 0, 234, 247, 0, 153, 46, 0, 0, 75, 290, 0, 169, 0, 0, 425, 
    92, 0, 198, 224, 21, 346, 33, 86, 0, 295, 0, 160, 152, 106, 0, 0, 197, 
    0, 159, 0, 370, 0, 96, 437]

S1 = [371, 453, 490, 154]
S2 = [353, 59, 273, 18]

def hash_f(key, T):
    return sum(T[i % 4] * ord(c) for i, c in enumerate(str(key))) % 495

def perfect_hash(key):
    return (G[hash_f(key, S1)] + G[hash_f(key, S2)]) % 495

# ============================ Sanity check =============================

K = ["deep", "that", "with", "this", "they", "from", "will", 
    "just", "when", "them", "into", "than", "like", "then", "also", "many", 
    "back", "even", "good", "down", "year", "over", "last", "take", "life", 
    "much", "most", "same", "such", "each", "look", "work", "next", "city", 
    "part", "tell", "went", "took", "give", "both", "fact", "case", "head", 
    "home", "help", "ever", "keep", "long", "feel", "kind", "best", "once", 
    "news", "face", "book", "area", "body", "able", "door", "name", "line", 
    "game", "food", "care", "idea", "else", "free", "live", "data", "gave", 
    "full", "play", "gone", "half", "town", "open", "love", "plan", "left", 
    "goes", "stay", "stop", "move", "less", "view", "park", "late", "land", 
    "soon", "gets", "upon", "thus", "easy", "fire", "form", "film", "rate", 
    "risk", "fine", "race", "army", "jobs", "test", "list", "king", "hope", 
    "deal", "type", "dark", "heat", "lost", "bill", "star", "bank", "cost", 
    "fish", "skin", "page", "loss", "kept", "held", "club", "goal", "rock", 
    "send", "cars", "wide", "fell", "trip", "term", "safe", "edge", "fall", 
    "lake", "arts", "fear", "tree", "rich", "save", "seat", "grew", "gold", 
    "grow", "task", "tiny", "legs", "post", "laws", "pass", "song", "firm", 
    "salt", "cool", "card", "warm", "soft", "pull", "join", "hill", "fund", 
    "neck", "camp", "unit", "note", "paid", "shot", "vote", "boat", "runs", 
    "fast", "lots", "path", "ship", "spot", "fans", "farm", "text", "tend", 
    "desk", "moon", "thin", "fuel", "snow", "tall", "shop", "tour", "golf", 
    "plus", "uses", "pool", "puts", "rare", "dogs", "gift", "soil", "flat", 
    "tape", "milk", "rice", "vast", "draw", "push", "miss", "code", "busy", 
    "cups", "asks", "crew", "sits", "rise", "drop", "host", "eggs", "glad", 
    "mass", "pink", "dust", "yard", "ages", "tone", "cook", "sand", "luck", 
    "roof", "hurt", "hang", "drew", "ears", "duty", "bike", "corn", "bags", 
    "clip", "navy", "gain", "cuts", "lies", "lock", "meal", "sing", "pure", 
    "boss", "palm", "dirt", "pace", "hero", "knee", "oven", "stir", "fees", 
    "gear", "item", "shut", "belt", "mile"]
H = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
    34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
    88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 
    104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 
    118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 
    132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 
    146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 
    174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 
    188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 
    202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 
    216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 
    230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 
    244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]

assert len(K) == len(H) == 255

for k, h in zip(K, H):
    assert perfect_hash(k) == h
